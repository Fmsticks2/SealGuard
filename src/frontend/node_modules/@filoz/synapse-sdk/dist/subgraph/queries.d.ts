export declare const QUERIES: {
    readonly GET_APPROVED_PROVIDERS_FOR_COMMP: "\n    query GetApprovedProvidersForCommP($cid: Bytes!) {\n      roots(where: { cid: $cid }) {\n        id\n        proofSet {\n          setId\n          owner {\n            id\n            address\n            pdpUrl\n            pieceRetrievalUrl\n            registeredAt\n            status\n            approvedAt\n          }\n        }\n      }\n    }\n  ";
    readonly GET_PROVIDER_BY_ADDRESS: "\n    query Provider($providerId: ID!) {\n      provider(id: $providerId) {\n        id\n        address\n        pdpUrl\n        pieceRetrievalUrl\n        registeredAt\n        approvedAt\n      }\n    }\n  ";
    readonly GET_PROVIDERS_FLEXIBLE: "\n    query ProvidersFlexible($where: Provider_filter, $first: Int, $skip: Int, $orderBy: Provider_orderBy, $orderDirection: OrderDirection) {\n      providers(\n        where: $where\n        first: $first\n        skip: $skip\n        orderBy: $orderBy\n        orderDirection: $orderDirection\n      ) {\n        id\n        address\n        pdpUrl\n        pieceRetrievalUrl\n        registeredAt\n        approvedAt\n        status\n        totalFaultedPeriods\n        totalFaultedRoots\n        totalProofSets\n        totalRoots\n        totalDataSize\n        createdAt\n        updatedAt\n      }\n    }\n  ";
    readonly GET_PROOF_SETS_FLEXIBLE: "\n    query ProofSetsFlexible($where: ProofSet_filter, $first: Int, $skip: Int, $orderBy: ProofSet_orderBy, $orderDirection: OrderDirection) {\n      proofSets(\n        where: $where\n        first: $first\n        skip: $skip\n        orderBy: $orderBy\n        orderDirection: $orderDirection\n      ) {\n        id\n        setId\n        listener\n        clientAddr\n        withCDN\n        isActive\n        leafCount\n        challengeRange\n        lastProvenEpoch\n        nextChallengeEpoch\n        totalRoots\n        totalDataSize\n        totalProofs\n        totalProvedRoots\n        totalFaultedPeriods\n        totalFaultedRoots\n        metadata\n        createdAt\n        updatedAt\n        owner {\n          id\n          address\n          pdpUrl\n          pieceRetrievalUrl\n          registeredAt\n          approvedAt\n        }\n        rail {\n          id\n          railId\n          token\n          paymentRate\n          lockupPeriod\n          settledUpto\n          endEpoch\n        }\n      }\n    }\n  ";
    readonly GET_ROOTS_FLEXIBLE: "\n    query RootsFlexible($where: Root_filter, $first: Int, $skip: Int, $orderBy: Root_orderBy, $orderDirection: OrderDirection) {\n      roots(\n        where: $where\n        first: $first\n        skip: $skip\n        orderBy: $orderBy\n        orderDirection: $orderDirection\n      ) {\n        id\n        setId\n        rootId\n        rawSize\n        leafCount\n        cid\n        removed\n        totalProofsSubmitted\n        totalPeriodsFaulted\n        lastProvenEpoch\n        lastProvenAt\n        lastFaultedEpoch\n        lastFaultedAt\n        createdAt\n        metadata\n        proofSet {\n          id\n          setId\n          isActive\n          owner {\n            id\n            address\n            pdpUrl\n            pieceRetrievalUrl\n            registeredAt\n            approvedAt\n          }\n        }\n      }\n    }\n  ";
    readonly GET_FAULT_RECORDS_FLEXIBLE: "\n    query FaultRecordsFlexible($where: FaultRecord_filter, $first: Int, $skip: Int, $orderBy: FaultRecord_orderBy, $orderDirection: OrderDirection) {\n      faultRecords(\n        where: $where\n        first: $first\n        skip: $skip\n        orderBy: $orderBy\n        orderDirection: $orderDirection\n      ) {\n        id\n        proofSetId\n        rootIds\n        currentChallengeEpoch\n        nextChallengeEpoch\n        periodsFaulted\n        deadline\n        createdAt\n        proofSet {\n          id\n          setId\n          owner {\n            id\n            address\n            pdpUrl\n            pieceRetrievalUrl\n            registeredAt\n            approvedAt\n          }\n        }\n      }\n    }\n  ";
};
//# sourceMappingURL=queries.d.ts.map
import type { StorageServiceOptions, ApprovedProviderInfo, DownloadOptions, PreflightInfo, UploadCallbacks, UploadResult, CommP, PieceStatus } from '../types.js';
import type { Synapse } from '../synapse.js';
import type { PandoraService } from '../pandora/service.js';
export declare class StorageService {
    private readonly _synapse;
    private readonly _provider;
    private readonly _pdpServer;
    private readonly _pandoraService;
    private readonly _pandoraAddress;
    private readonly _withCDN;
    private readonly _proofSetId;
    private readonly _signer;
    readonly proofSetId: string;
    readonly storageProvider: string;
    private static validateRawSize;
    constructor(synapse: Synapse, pandoraService: PandoraService, provider: ApprovedProviderInfo, proofSetId: number, options: StorageServiceOptions);
    static create(synapse: Synapse, pandoraService: PandoraService, options: StorageServiceOptions): Promise<StorageService>;
    private static createProofSet;
    private static resolveProviderAndProofSet;
    private static resolveByProofSetId;
    private static validateProofSetConsistency;
    private static resolveByProviderId;
    private static resolveByProviderAddress;
    private static smartSelectProvider;
    private static selectRandomProvider;
    private static selectProviderWithPing;
    preflightUpload(size: number): Promise<PreflightInfo>;
    upload(data: Uint8Array | ArrayBuffer, callbacks?: UploadCallbacks): Promise<UploadResult>;
    providerDownload(commp: string | CommP, options?: DownloadOptions): Promise<Uint8Array>;
    download(commp: string | CommP, options?: DownloadOptions): Promise<Uint8Array>;
    getProviderInfo(): Promise<ApprovedProviderInfo>;
    getProofSetRoots(): Promise<CommP[]>;
    pieceStatus(commp: string | CommP): Promise<PieceStatus>;
}
//# sourceMappingURL=service.d.ts.map
import * as SynapseSDKExports from './index.js';
import * as commpExports from './commp/index.js';
declare const allExports: {
    PDPAuthHelper: typeof SynapseSDKExports.PDPAuthHelper;
    PDPVerifier: typeof SynapseSDKExports.PDPVerifier;
    PDPServer: typeof SynapseSDKExports.PDPServer;
    isProofSetCreationStatusResponse: typeof SynapseSDKExports.isProofSetCreationStatusResponse;
    isRootAdditionStatusResponse: typeof SynapseSDKExports.isRootAdditionStatusResponse;
    isFindPieceResponse: typeof SynapseSDKExports.isFindPieceResponse;
    validateProofSetCreationStatusResponse: typeof SynapseSDKExports.validateProofSetCreationStatusResponse;
    validateRootAdditionStatusResponse: typeof SynapseSDKExports.validateRootAdditionStatusResponse;
    validateFindPieceResponse: typeof SynapseSDKExports.validateFindPieceResponse;
    asProofSetRootData: typeof SynapseSDKExports.asProofSetRootData;
    asProofSetData: typeof SynapseSDKExports.asProofSetData;
    FIL_COMMITMENT_UNSEALED: 61697;
    SHA2_256_TRUNC254_PADDED: 4114;
    asCommP: typeof commpExports.asCommP;
    calculate: typeof commpExports.calculate;
    createCommPStream: typeof commpExports.createCommPStream;
    toZeroPaddedSize: typeof commpExports.toZeroPaddedSize;
    toPieceSize: typeof commpExports.toPieceSize;
    downloadAndValidateCommP: typeof commpExports.downloadAndValidateCommP;
    downloadAndValidateCommPFromUrl: typeof commpExports.downloadAndValidateCommPFromUrl;
    Synapse: typeof SynapseSDKExports.Synapse;
    createError: typeof SynapseSDKExports.createError;
    constructPieceUrl: typeof SynapseSDKExports.constructPieceUrl;
    constructFindPieceUrl: typeof SynapseSDKExports.constructFindPieceUrl;
    TOKENS: {
        readonly USDFC: "USDFC";
        readonly FIL: "FIL";
    };
    CHAIN_IDS: Record<SynapseSDKExports.FilecoinNetworkType, number>;
    CONTRACT_ABIS: {
        readonly ERC20: readonly ["function balanceOf(address owner) view returns (uint256)", "function decimals() view returns (uint8)", "function symbol() view returns (string)", "function approve(address spender, uint256 amount) returns (bool)", "function allowance(address owner, address spender) view returns (uint256)", "function transfer(address to, uint256 amount) returns (bool)"];
        readonly PAYMENTS: readonly ["function deposit(address token, address to, uint256 amount)", "function withdraw(address token, uint256 amount)", "function accounts(address token, address owner) view returns (uint256 funds, uint256 lockupCurrent, uint256 lockupRate, uint256 lockupLastSettledAt)", "function setOperatorApproval(address token, address operator, bool approved, uint256 rateAllowance, uint256 lockupAllowance)", "function operatorApprovals(address token, address client, address operator) view returns (bool isApproved, uint256 rateAllowance, uint256 rateUsed, uint256 lockupAllowance, uint256 lockupUsed)"];
        readonly PANDORA_SERVICE: readonly ["function registerServiceProvider(string pdpUrl, string pieceRetrievalUrl) external", "function approveServiceProvider(address provider) external", "function rejectServiceProvider(address provider) external", "function removeServiceProvider(uint256 providerId) external", "function addServiceProvider(address provider, string pdpUrl, string pieceRetrievalUrl) external", "function isProviderApproved(address provider) external view returns (bool)", "function getProviderIdByAddress(address provider) external view returns (uint256)", "function getApprovedProvider(uint256 providerId) external view returns (tuple(address owner, string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt, uint256 approvedAt))", "function pendingProviders(address provider) external view returns (string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt)", "function approvedProviders(uint256 providerId) external view returns (address owner, string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt, uint256 approvedAt)", "function nextServiceProviderId() external view returns (uint256)", "function owner() external view returns (address)", "function getServicePrice() external view returns (tuple(uint256 pricePerTiBPerMonthNoCDN, uint256 pricePerTiBPerMonthWithCDN, address tokenAddress, uint256 epochsPerMonth) pricing)", "function approvedProvidersMap(address) external view returns (bool)", "function providerToId(address) external view returns (uint256)", "function getAllApprovedProviders() external view returns (tuple(address owner, string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt, uint256 approvedAt)[])", "function getClientProofSets(address client) external view returns (tuple(uint256 railId, address payer, address payee, uint256 commissionBps, string metadata, string[] rootMetadata, uint256 clientDataSetId, bool withCDN)[])", "function clientDataSetIDs(address client) external view returns (uint256)", "function railToProofSet(uint256 railId) external view returns (uint256 proofSetId)", "function getProofSet(uint256 id) public view returns (tuple(uint256 railId, address payer, address payee, uint256 commissionBps, string metadata, string[] rootMetadata, uint256 clientDataSetId, bool withCDN) info)", "function getMaxProvingPeriod() external view returns (uint64)", "function challengeWindow() external view returns (uint256)", "function maxProvingPeriod() external view returns (uint64)", "function challengeWindowSize() external view returns (uint256)"];
        readonly PDP_VERIFIER: readonly ["function getNextRootId(uint256 setId) public view returns (uint256)", "function proofSetLive(uint256 setId) public view returns (bool)", "function getProofSetLeafCount(uint256 setId) public view returns (uint256)", "function getProofSetOwner(uint256 setId) public view returns (address, address)", "function getProofSetListener(uint256 setId) public view returns (address)", "event ProofSetCreated(uint256 indexed setId, address indexed owner)"];
    };
    TIME_CONSTANTS: {
        readonly EPOCH_DURATION: 30;
        readonly EPOCHS_PER_DAY: 2880n;
        readonly EPOCHS_PER_MONTH: 86400n;
        readonly DAYS_PER_MONTH: 30n;
        readonly DEFAULT_LOCKUP_DAYS: 10n;
    };
    GENESIS_TIMESTAMPS: Record<SynapseSDKExports.FilecoinNetworkType, number>;
    SIZE_CONSTANTS: {
        readonly KiB: 1024n;
        readonly MiB: bigint;
        readonly GiB: bigint;
        readonly TiB: bigint;
        readonly MAX_UPLOAD_SIZE: number;
        readonly MIN_UPLOAD_SIZE: 65;
    };
    TIMING_CONSTANTS: {
        readonly TRANSACTION_PROPAGATION_TIMEOUT_MS: 30000;
        readonly TRANSACTION_PROPAGATION_POLL_INTERVAL_MS: 2000;
        readonly PROOF_SET_CREATION_TIMEOUT_MS: number;
        readonly PROOF_SET_CREATION_POLL_INTERVAL_MS: 2000;
        readonly PIECE_PARKING_TIMEOUT_MS: number;
        readonly PIECE_PARKING_POLL_INTERVAL_MS: 5000;
        readonly TRANSACTION_CONFIRMATIONS: 1;
        readonly ROOT_ADDITION_TIMEOUT_MS: number;
        readonly ROOT_ADDITION_POLL_INTERVAL_MS: 1000;
    };
    RPC_URLS: Record<SynapseSDKExports.FilecoinNetworkType, {
        http: string;
        websocket: string;
    }>;
    CONTRACT_ADDRESSES: {
        readonly USDFC: {
            readonly mainnet: "0x80B98d3aa09ffff255c3ba4A241111Ff1262F045";
            readonly calibration: "0xb3042734b608a1B16e9e86B374A3f3e389B4cDf0";
        };
        readonly PAYMENTS: {
            readonly mainnet: "";
            readonly calibration: "0x0E690D3e60B0576D01352AB03b258115eb84A047";
        };
        readonly PANDORA_SERVICE: {
            readonly mainnet: "";
            readonly calibration: "0xf49ba5eaCdFD5EE3744efEdf413791935FE4D4c5";
        };
        readonly PDP_VERIFIER: {
            readonly mainnet: "";
            readonly calibration: "0x5A23b7df87f59A291C26A2A1d684AD03Ce9B68DC";
        };
    };
    MULTIHASH_CODES: {
        readonly SHA2_256_TRUNC254_PADDED: "sha2-256-trunc254-padded";
    };
    epochToDate(epoch: number, network: SynapseSDKExports.FilecoinNetworkType): Date;
    dateToEpoch(date: Date, network: SynapseSDKExports.FilecoinNetworkType): number;
    getGenesisTimestamp(network: SynapseSDKExports.FilecoinNetworkType): number;
    timeUntilEpoch(futureEpoch: number, currentEpoch: number): {
        epochs: number;
        seconds: number;
        minutes: number;
        hours: number;
        days: number;
    };
    calculateLastProofDate(nextChallengeEpoch: number, maxProvingPeriod: number, network: SynapseSDKExports.FilecoinNetworkType): Date | null;
    PaymentsService: typeof SynapseSDKExports.PaymentsService;
    PandoraService: typeof SynapseSDKExports.PandoraService;
    StorageService: typeof SynapseSDKExports.StorageService;
    SubgraphService: typeof SynapseSDKExports.SubgraphService;
};
export default allExports;
//# sourceMappingURL=browser-entry.d.ts.map
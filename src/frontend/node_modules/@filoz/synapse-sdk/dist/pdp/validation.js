import { asCommP } from '../commp/commp.js';
export function isProofSetCreationStatusResponse(value) {
    if (typeof value !== 'object' || value == null) {
        return false;
    }
    const obj = value;
    if (typeof obj.createMessageHash !== 'string') {
        return false;
    }
    const hasProofSetCreated = typeof obj.proofSetCreated === 'boolean';
    const hasProofsetCreated = typeof obj.proofsetCreated === 'boolean';
    if (!hasProofSetCreated && !hasProofsetCreated) {
        return false;
    }
    if (typeof obj.service !== 'string') {
        return false;
    }
    if (typeof obj.txStatus !== 'string') {
        return false;
    }
    if (obj.ok !== null && typeof obj.ok !== 'boolean') {
        return false;
    }
    if (obj.proofSetId !== undefined && typeof obj.proofSetId !== 'number') {
        return false;
    }
    return true;
}
export function isRootAdditionStatusResponse(value) {
    if (typeof value !== 'object' || value == null) {
        return false;
    }
    const obj = value;
    if (typeof obj.txHash !== 'string') {
        return false;
    }
    if (typeof obj.txStatus !== 'string') {
        return false;
    }
    if (typeof obj.proofSetId !== 'number') {
        return false;
    }
    if (typeof obj.rootCount !== 'number') {
        return false;
    }
    if (obj.addMessageOk !== null && typeof obj.addMessageOk !== 'boolean') {
        return false;
    }
    if (obj.confirmedRootIds !== undefined) {
        if (!Array.isArray(obj.confirmedRootIds)) {
            return false;
        }
        for (const id of obj.confirmedRootIds) {
            if (typeof id !== 'number') {
                return false;
            }
        }
    }
    return true;
}
export function isFindPieceResponse(value) {
    if (typeof value !== 'object' || value == null) {
        return false;
    }
    const obj = value;
    const hasPieceCid = typeof obj.pieceCid === 'string';
    const hasPieceCidLegacy = typeof obj.piece_cid === 'string';
    if (!hasPieceCid && !hasPieceCidLegacy) {
        return false;
    }
    const cidToValidate = (obj.pieceCid ?? obj.piece_cid);
    if (asCommP(cidToValidate) == null) {
        return false;
    }
    return true;
}
export function validateProofSetCreationStatusResponse(value) {
    if (!isProofSetCreationStatusResponse(value)) {
        throw new Error('Invalid proof set creation status response format');
    }
    const obj = value;
    const normalized = {
        createMessageHash: obj.createMessageHash,
        proofSetCreated: obj.proofSetCreated ?? obj.proofsetCreated,
        service: obj.service,
        txStatus: obj.txStatus,
        ok: obj.ok
    };
    if (obj.proofSetId !== undefined) {
        normalized.proofSetId = obj.proofSetId;
    }
    return normalized;
}
export function validateRootAdditionStatusResponse(value) {
    if (!isRootAdditionStatusResponse(value)) {
        throw new Error('Invalid root addition status response format');
    }
    return value;
}
export function validateFindPieceResponse(value) {
    if (!isFindPieceResponse(value)) {
        if (typeof value === 'object' && value != null) {
            const obj = value;
            const cidStr = (obj.pieceCid ?? obj.piece_cid);
            if (cidStr != null && asCommP(cidStr) == null) {
                throw new Error('Invalid find piece response: pieceCid is not a valid CommP');
            }
        }
        throw new Error('Invalid find piece response format');
    }
    const obj = value;
    const cidStr = (obj.pieceCid ?? obj.piece_cid);
    const commP = asCommP(cidStr);
    if (commP == null) {
        throw new Error('Invalid find piece response: pieceCid is not a valid CommP');
    }
    return {
        pieceCid: commP,
        piece_cid: obj.piece_cid
    };
}
export function asProofSetRootData(value) {
    if (typeof value !== 'object' || value == null) {
        return null;
    }
    const obj = value;
    if (typeof obj.rootId !== 'number') {
        return null;
    }
    if (typeof obj.rootCid !== 'string') {
        return null;
    }
    if (typeof obj.subrootCid !== 'string') {
        return null;
    }
    if (typeof obj.subrootOffset !== 'number') {
        return null;
    }
    const rootCid = asCommP(obj.rootCid);
    const subrootCid = asCommP(obj.subrootCid);
    if (rootCid == null || subrootCid == null) {
        return null;
    }
    return {
        rootId: obj.rootId,
        rootCid,
        subrootCid,
        subrootOffset: obj.subrootOffset
    };
}
export function asProofSetData(value) {
    if (typeof value !== 'object' || value == null) {
        return null;
    }
    const obj = value;
    if (typeof obj.id !== 'number') {
        return null;
    }
    if (!Array.isArray(obj.roots)) {
        return null;
    }
    const convertedRoots = [];
    for (const root of obj.roots) {
        const convertedRoot = asProofSetRootData(root);
        if (convertedRoot == null) {
            return null;
        }
        convertedRoots.push(convertedRoot);
    }
    if (typeof obj.nextChallengeEpoch !== 'number') {
        return null;
    }
    return {
        id: obj.id,
        roots: convertedRoots,
        nextChallengeEpoch: obj.nextChallengeEpoch
    };
}
//# sourceMappingURL=validation.js.map
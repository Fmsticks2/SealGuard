import { ethers } from 'ethers';
import { type AuthSignature, type RootData } from '../types.js';
declare global {
    interface Window {
        ethereum?: any;
    }
}
export declare class PDPAuthHelper {
    private readonly signer;
    private readonly domain;
    constructor(serviceContractAddress: string, signer: ethers.Signer, chainId: bigint);
    private getUnderlyingSigner;
    private isMetaMaskSigner;
    private signWithMetaMask;
    signCreateProofSet(clientDataSetId: number | bigint, payee: string, withCDN?: boolean): Promise<AuthSignature>;
    signAddRoots(clientDataSetId: number | bigint, firstRootId: number | bigint, rootDataArray: RootData[]): Promise<AuthSignature>;
    signScheduleRemovals(clientDataSetId: number | bigint, rootIds: Array<number | bigint>): Promise<AuthSignature>;
    signDeleteProofSet(clientDataSetId: number | bigint): Promise<AuthSignature>;
    getSignerAddress(): Promise<string>;
}
//# sourceMappingURL=auth.d.ts.map
import type { PDPAuthHelper } from './auth.js';
import type { RootData, CommP, ProofSetData } from '../types.js';
export interface CreateProofSetResponse {
    txHash: string;
    statusUrl: string;
}
export interface ProofSetCreationStatusResponse {
    createMessageHash: string;
    proofSetCreated: boolean;
    service: string;
    txStatus: string;
    ok: boolean | null;
    proofSetId?: number;
}
export interface AddRootsResponse {
    message: string;
    txHash?: string;
    statusUrl?: string;
}
export interface FindPieceResponse {
    pieceCid: CommP;
    piece_cid?: string;
}
export interface UploadResponse {
    commP: CommP;
    size: number;
}
export interface RootAdditionStatusResponse {
    txHash: string;
    txStatus: string;
    proofSetId: number;
    rootCount: number;
    addMessageOk: boolean | null;
    confirmedRootIds?: number[];
}
export declare class PDPServer {
    private readonly _apiEndpoint;
    private readonly _retrievalEndpoint;
    private readonly _authHelper;
    private readonly _serviceName;
    constructor(authHelper: PDPAuthHelper | null, apiEndpoint: string, retrievalEndpoint: string, serviceName?: string);
    createProofSet(clientDataSetId: number, payee: string, withCDN: boolean, recordKeeper: string): Promise<CreateProofSetResponse>;
    addRoots(proofSetId: number, clientDataSetId: number, nextRootId: number, rootDataArray: RootData[]): Promise<AddRootsResponse>;
    getProofSetCreationStatus(txHash: string): Promise<ProofSetCreationStatusResponse>;
    getRootAdditionStatus(proofSetId: number, txHash: string): Promise<RootAdditionStatusResponse>;
    findPiece(commP: string | CommP, size: number): Promise<FindPieceResponse>;
    uploadPiece(data: Uint8Array | ArrayBuffer): Promise<UploadResponse>;
    downloadPiece(commP: string | CommP): Promise<Uint8Array>;
    getProofSet(proofSetId: number): Promise<ProofSetData>;
    private _encodeProofSetCreateData;
    private _encodeAddRootsExtraData;
    ping(): Promise<void>;
    getApiEndpoint(): string;
    getAuthHelper(): PDPAuthHelper;
}
//# sourceMappingURL=server.d.ts.map
import { ethers } from 'ethers';
import { type SynapseOptions, type StorageServiceOptions, type FilecoinNetworkType, type CommP, type ApprovedProviderInfo, type StorageInfo } from './types.js';
import { StorageService } from './storage/index.js';
import { PaymentsService } from './payments/index.js';
export declare class Synapse {
    private readonly _signer;
    private readonly _network;
    private readonly _withCDN;
    private readonly _payments;
    private readonly _provider;
    private readonly _pandoraAddress;
    private readonly _pdpVerifierAddress;
    private readonly _pandoraService;
    private readonly _pieceRetriever;
    static create(options: SynapseOptions): Promise<Synapse>;
    private constructor();
    get payments(): PaymentsService;
    getProvider(): ethers.Provider;
    getSigner(): ethers.Signer;
    getChainId(): bigint;
    getPandoraAddress(): string;
    getPDPVerifierAddress(): string;
    createStorage(options?: StorageServiceOptions): Promise<StorageService>;
    getNetwork(): FilecoinNetworkType;
    getProviderInfo(providerAddress: string): Promise<ApprovedProviderInfo>;
    download(commp: string | CommP, options?: {
        withCDN?: boolean;
        providerAddress?: string;
    }): Promise<Uint8Array>;
    getStorageInfo(): Promise<StorageInfo>;
}
export { Synapse as default };
//# sourceMappingURL=synapse.d.ts.map
import { ethers } from 'ethers';
import { CONTRACT_ABIS } from '../utils/index.js';
export class PDPVerifier {
    _provider;
    _contractAddress;
    _contract;
    constructor(provider, contractAddress) {
        this._provider = provider;
        this._contractAddress = contractAddress;
        this._contract = new ethers.Contract(this._contractAddress, CONTRACT_ABIS.PDP_VERIFIER, this._provider);
    }
    async proofSetLive(proofSetId) {
        return await this._contract.proofSetLive(proofSetId);
    }
    async getNextRootId(proofSetId) {
        const nextRootId = await this._contract.getNextRootId(proofSetId);
        return Number(nextRootId);
    }
    async getProofSetListener(proofSetId) {
        return await this._contract.getProofSetListener(proofSetId);
    }
    async getProofSetOwner(proofSetId) {
        const [owner, proposedOwner] = await this._contract.getProofSetOwner(proofSetId);
        return { owner, proposedOwner };
    }
    async getProofSetLeafCount(proofSetId) {
        const leafCount = await this._contract.getProofSetLeafCount(proofSetId);
        return Number(leafCount);
    }
    extractProofSetIdFromReceipt(receipt) {
        try {
            for (const log of receipt.logs) {
                try {
                    const parsedLog = this._contract.interface.parseLog({
                        topics: log.topics,
                        data: log.data
                    });
                    if (parsedLog != null && parsedLog.name === 'ProofSetCreated') {
                        return Number(parsedLog.args.setId);
                    }
                }
                catch (e) {
                    continue;
                }
            }
            return null;
        }
        catch (error) {
            throw new Error(`Failed to extract proof set ID from receipt: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    getContractAddress() {
        return this._contract.target;
    }
}
//# sourceMappingURL=verifier.js.map
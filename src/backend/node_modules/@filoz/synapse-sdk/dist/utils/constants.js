export const TOKENS = {
    USDFC: 'USDFC',
    FIL: 'FIL'
};
export const CHAIN_IDS = {
    mainnet: 314,
    calibration: 314159
};
export const CONTRACT_ABIS = {
    ERC20: [
        'function balanceOf(address owner) view returns (uint256)',
        'function decimals() view returns (uint8)',
        'function symbol() view returns (string)',
        'function approve(address spender, uint256 amount) returns (bool)',
        'function allowance(address owner, address spender) view returns (uint256)',
        'function transfer(address to, uint256 amount) returns (bool)'
    ],
    PAYMENTS: [
        'function deposit(address token, address to, uint256 amount)',
        'function withdraw(address token, uint256 amount)',
        'function accounts(address token, address owner) view returns (uint256 funds, uint256 lockupCurrent, uint256 lockupRate, uint256 lockupLastSettledAt)',
        'function setOperatorApproval(address token, address operator, bool approved, uint256 rateAllowance, uint256 lockupAllowance)',
        'function operatorApprovals(address token, address client, address operator) view returns (bool isApproved, uint256 rateAllowance, uint256 rateUsed, uint256 lockupAllowance, uint256 lockupUsed)'
    ],
    PANDORA_SERVICE: [
        'function registerServiceProvider(string pdpUrl, string pieceRetrievalUrl) external',
        'function approveServiceProvider(address provider) external',
        'function rejectServiceProvider(address provider) external',
        'function removeServiceProvider(uint256 providerId) external',
        'function addServiceProvider(address provider, string pdpUrl, string pieceRetrievalUrl) external',
        'function isProviderApproved(address provider) external view returns (bool)',
        'function getProviderIdByAddress(address provider) external view returns (uint256)',
        'function getApprovedProvider(uint256 providerId) external view returns (tuple(address owner, string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt, uint256 approvedAt))',
        'function pendingProviders(address provider) external view returns (string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt)',
        'function approvedProviders(uint256 providerId) external view returns (address owner, string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt, uint256 approvedAt)',
        'function nextServiceProviderId() external view returns (uint256)',
        'function owner() external view returns (address)',
        'function getServicePrice() external view returns (tuple(uint256 pricePerTiBPerMonthNoCDN, uint256 pricePerTiBPerMonthWithCDN, address tokenAddress, uint256 epochsPerMonth) pricing)',
        'function approvedProvidersMap(address) external view returns (bool)',
        'function providerToId(address) external view returns (uint256)',
        'function getAllApprovedProviders() external view returns (tuple(address owner, string pdpUrl, string pieceRetrievalUrl, uint256 registeredAt, uint256 approvedAt)[])',
        'function getClientProofSets(address client) external view returns (tuple(uint256 railId, address payer, address payee, uint256 commissionBps, string metadata, string[] rootMetadata, uint256 clientDataSetId, bool withCDN)[])',
        'function clientDataSetIDs(address client) external view returns (uint256)',
        'function railToProofSet(uint256 railId) external view returns (uint256 proofSetId)',
        'function getProofSet(uint256 id) public view returns (tuple(uint256 railId, address payer, address payee, uint256 commissionBps, string metadata, string[] rootMetadata, uint256 clientDataSetId, bool withCDN) info)',
        'function getMaxProvingPeriod() external view returns (uint64)',
        'function challengeWindow() external view returns (uint256)',
        'function maxProvingPeriod() external view returns (uint64)',
        'function challengeWindowSize() external view returns (uint256)'
    ],
    PDP_VERIFIER: [
        'function getNextRootId(uint256 setId) public view returns (uint256)',
        'function proofSetLive(uint256 setId) public view returns (bool)',
        'function getProofSetLeafCount(uint256 setId) public view returns (uint256)',
        'function getProofSetOwner(uint256 setId) public view returns (address, address)',
        'function getProofSetListener(uint256 setId) public view returns (address)',
        'event ProofSetCreated(uint256 indexed setId, address indexed owner)'
    ]
};
export const TIME_CONSTANTS = {
    EPOCH_DURATION: 30,
    EPOCHS_PER_DAY: 2880n,
    EPOCHS_PER_MONTH: 86400n,
    DAYS_PER_MONTH: 30n,
    DEFAULT_LOCKUP_DAYS: 10n
};
export const GENESIS_TIMESTAMPS = {
    mainnet: 1598306400,
    calibration: 1667326380
};
export const SIZE_CONSTANTS = {
    KiB: 1024n,
    MiB: 1024n * 1024n,
    GiB: 1024n * 1024n * 1024n,
    TiB: 1024n * 1024n * 1024n * 1024n,
    MAX_UPLOAD_SIZE: 200 * 1024 * 1024,
    MIN_UPLOAD_SIZE: 65
};
export const TIMING_CONSTANTS = {
    TRANSACTION_PROPAGATION_TIMEOUT_MS: 30000,
    TRANSACTION_PROPAGATION_POLL_INTERVAL_MS: 2000,
    PROOF_SET_CREATION_TIMEOUT_MS: 7 * 60 * 1000,
    PROOF_SET_CREATION_POLL_INTERVAL_MS: 2000,
    PIECE_PARKING_TIMEOUT_MS: 7 * 60 * 1000,
    PIECE_PARKING_POLL_INTERVAL_MS: 5000,
    TRANSACTION_CONFIRMATIONS: 1,
    ROOT_ADDITION_TIMEOUT_MS: 7 * 60 * 1000,
    ROOT_ADDITION_POLL_INTERVAL_MS: 1000
};
export const RPC_URLS = {
    mainnet: {
        http: 'https://api.node.glif.io/rpc/v1',
        websocket: 'wss://wss.node.glif.io/apigw/lotus/rpc/v1'
    },
    calibration: {
        http: 'https://api.calibration.node.glif.io/rpc/v1',
        websocket: 'wss://wss.calibration.node.glif.io/apigw/lotus/rpc/v1'
    }
};
export const CONTRACT_ADDRESSES = {
    USDFC: {
        mainnet: '0x80B98d3aa09ffff255c3ba4A241111Ff1262F045',
        calibration: '0xb3042734b608a1B16e9e86B374A3f3e389B4cDf0'
    },
    PAYMENTS: {
        mainnet: '',
        calibration: '0x0E690D3e60B0576D01352AB03b258115eb84A047'
    },
    PANDORA_SERVICE: {
        mainnet: '',
        calibration: '0xf49ba5eaCdFD5EE3744efEdf413791935FE4D4c5'
    },
    PDP_VERIFIER: {
        mainnet: '',
        calibration: '0x5A23b7df87f59A291C26A2A1d684AD03Ce9B68DC'
    }
};
export const MULTIHASH_CODES = {
    SHA2_256_TRUNC254_PADDED: 'sha2-256-trunc254-padded'
};
//# sourceMappingURL=constants.js.map